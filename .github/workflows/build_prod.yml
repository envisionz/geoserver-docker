name: Create and publish Geoserver Docker image

on:
  workflow_dispatch:
  schedule:
    cron: '5 1 * * 3'
  push:
    branches:
      - v1*

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: geoserver

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        branch: [ 1 ]
        gs_version: [ "2.19.2", "2.18.4" ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: "v${{ matrix.branch }}"

      - name: Install dependencies
        run: sudo apt-get install -y curl unzip parallel xmlstarlet

      - name: Pre-download Geoserver and plugins
        working-directory: ./geoserver_dl
        run: |
          SF_DL_SCRIPT=${PWD}/../scripts/sf-dl.sh COMMUNITY_DL_SCRIPT=${PWD}/../scripts/community-dl.sh ../scripts/download.sh
        env:
          GSRV_VERSION: ${{ matrix.gs_version }}
        shell: bash

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,${{ matrix.branch }}-${{ matrix.gs_version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          build-args: 
            - GSRV_VERSION=${{ matrix.gs_version }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
